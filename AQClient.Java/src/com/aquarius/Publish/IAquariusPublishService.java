
package com.aquarius.Publish;

import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6b21 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "IAquariusPublishService", targetNamespace = "http://tempuri.org/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface IAquariusPublishService {


    /**
     * 
     * @param encodedPassword
     * @param user
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.GetAuthTokenResponse>
     */
    @WebMethod(operationName = "GetAuthToken", action = "http://tempuri.org/IAQAuthSession/GetAuthToken")
    @RequestWrapper(localName = "GetAuthToken", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetAuthToken")
    @ResponseWrapper(localName = "GetAuthTokenResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetAuthTokenResponse")
    public Response<GetAuthTokenResponse> getAuthTokenAsync(
        @WebParam(name = "user", targetNamespace = "http://tempuri.org/")
        String user,
        @WebParam(name = "encodedPassword", targetNamespace = "http://tempuri.org/")
        String encodedPassword);

    /**
     * 
     * @param encodedPassword
     * @param asyncHandler
     * @param user
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetAuthToken", action = "http://tempuri.org/IAQAuthSession/GetAuthToken")
    @RequestWrapper(localName = "GetAuthToken", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetAuthToken")
    @ResponseWrapper(localName = "GetAuthTokenResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetAuthTokenResponse")
    public Future<?> getAuthTokenAsync(
        @WebParam(name = "user", targetNamespace = "http://tempuri.org/")
        String user,
        @WebParam(name = "encodedPassword", targetNamespace = "http://tempuri.org/")
        String encodedPassword,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAuthTokenResponse> asyncHandler);

    /**
     * 
     * @param encodedPassword
     * @param user
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetAuthToken", action = "http://tempuri.org/IAQAuthSession/GetAuthToken")
    @WebResult(name = "GetAuthTokenResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "GetAuthToken", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetAuthToken")
    @ResponseWrapper(localName = "GetAuthTokenResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetAuthTokenResponse")
    public String getAuthToken(
        @WebParam(name = "user", targetNamespace = "http://tempuri.org/")
        String user,
        @WebParam(name = "encodedPassword", targetNamespace = "http://tempuri.org/")
        String encodedPassword);

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.IsConnectionValidResponse>
     */
    @WebMethod(operationName = "IsConnectionValid", action = "http://tempuri.org/IAQAuthSession/IsConnectionValid")
    @RequestWrapper(localName = "IsConnectionValid", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.IsConnectionValid")
    @ResponseWrapper(localName = "IsConnectionValidResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.IsConnectionValidResponse")
    public Response<IsConnectionValidResponse> isConnectionValidAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "IsConnectionValid", action = "http://tempuri.org/IAQAuthSession/IsConnectionValid")
    @RequestWrapper(localName = "IsConnectionValid", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.IsConnectionValid")
    @ResponseWrapper(localName = "IsConnectionValidResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.IsConnectionValidResponse")
    public Future<?> isConnectionValidAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<IsConnectionValidResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.lang.Boolean
     */
    @WebMethod(operationName = "IsConnectionValid", action = "http://tempuri.org/IAQAuthSession/IsConnectionValid")
    @WebResult(name = "IsConnectionValidResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "IsConnectionValid", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.IsConnectionValid")
    @ResponseWrapper(localName = "IsConnectionValidResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.IsConnectionValidResponse")
    public Boolean isConnectionValid();

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.KeepConnectionAliveResponse>
     */
    @WebMethod(operationName = "KeepConnectionAlive", action = "http://tempuri.org/IAQAuthSession/KeepConnectionAlive")
    @RequestWrapper(localName = "KeepConnectionAlive", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.KeepConnectionAlive")
    @ResponseWrapper(localName = "KeepConnectionAliveResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.KeepConnectionAliveResponse")
    public Response<KeepConnectionAliveResponse> keepConnectionAliveAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "KeepConnectionAlive", action = "http://tempuri.org/IAQAuthSession/KeepConnectionAlive")
    @RequestWrapper(localName = "KeepConnectionAlive", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.KeepConnectionAlive")
    @ResponseWrapper(localName = "KeepConnectionAliveResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.KeepConnectionAliveResponse")
    public Future<?> keepConnectionAliveAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<KeepConnectionAliveResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.lang.Boolean
     */
    @WebMethod(operationName = "KeepConnectionAlive", action = "http://tempuri.org/IAQAuthSession/KeepConnectionAlive")
    @WebResult(name = "KeepConnectionAliveResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "KeepConnectionAlive", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.KeepConnectionAlive")
    @ResponseWrapper(localName = "KeepConnectionAliveResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.KeepConnectionAliveResponse")
    public Boolean keepConnectionAlive();

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.GetParameterListResponse>
     */
    @WebMethod(operationName = "GetParameterList", action = "http://tempuri.org/IAquariusPublishService/GetParameterList")
    @RequestWrapper(localName = "GetParameterList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetParameterList")
    @ResponseWrapper(localName = "GetParameterListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetParameterListResponse")
    public Response<GetParameterListResponse> getParameterListAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetParameterList", action = "http://tempuri.org/IAquariusPublishService/GetParameterList")
    @RequestWrapper(localName = "GetParameterList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetParameterList")
    @ResponseWrapper(localName = "GetParameterListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetParameterListResponse")
    public Future<?> getParameterListAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetParameterListResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetParameterList", action = "http://tempuri.org/IAquariusPublishService/GetParameterList")
    @WebResult(name = "GetParameterListResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "GetParameterList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetParameterList")
    @ResponseWrapper(localName = "GetParameterListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetParameterListResponse")
    public String getParameterList();

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.GetFlagListResponse>
     */
    @WebMethod(operationName = "GetFlagList", action = "http://tempuri.org/IAquariusPublishService/GetFlagList")
    @RequestWrapper(localName = "GetFlagList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetFlagList")
    @ResponseWrapper(localName = "GetFlagListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetFlagListResponse")
    public Response<GetFlagListResponse> getFlagListAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetFlagList", action = "http://tempuri.org/IAquariusPublishService/GetFlagList")
    @RequestWrapper(localName = "GetFlagList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetFlagList")
    @ResponseWrapper(localName = "GetFlagListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetFlagListResponse")
    public Future<?> getFlagListAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetFlagListResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetFlagList", action = "http://tempuri.org/IAquariusPublishService/GetFlagList")
    @WebResult(name = "GetFlagListResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "GetFlagList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetFlagList")
    @ResponseWrapper(localName = "GetFlagListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetFlagListResponse")
    public String getFlagList();

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.GetGradeListResponse>
     */
    @WebMethod(operationName = "GetGradeList", action = "http://tempuri.org/IAquariusPublishService/GetGradeList")
    @RequestWrapper(localName = "GetGradeList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetGradeList")
    @ResponseWrapper(localName = "GetGradeListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetGradeListResponse")
    public Response<GetGradeListResponse> getGradeListAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetGradeList", action = "http://tempuri.org/IAquariusPublishService/GetGradeList")
    @RequestWrapper(localName = "GetGradeList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetGradeList")
    @ResponseWrapper(localName = "GetGradeListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetGradeListResponse")
    public Future<?> getGradeListAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetGradeListResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetGradeList", action = "http://tempuri.org/IAquariusPublishService/GetGradeList")
    @WebResult(name = "GetGradeListResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "GetGradeList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetGradeList")
    @ResponseWrapper(localName = "GetGradeListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetGradeListResponse")
    public String getGradeList();

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.GetApprovalListResponse>
     */
    @WebMethod(operationName = "GetApprovalList", action = "http://tempuri.org/IAquariusPublishService/GetApprovalList")
    @RequestWrapper(localName = "GetApprovalList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetApprovalList")
    @ResponseWrapper(localName = "GetApprovalListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetApprovalListResponse")
    public Response<GetApprovalListResponse> getApprovalListAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetApprovalList", action = "http://tempuri.org/IAquariusPublishService/GetApprovalList")
    @RequestWrapper(localName = "GetApprovalList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetApprovalList")
    @ResponseWrapper(localName = "GetApprovalListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetApprovalListResponse")
    public Future<?> getApprovalListAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetApprovalListResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetApprovalList", action = "http://tempuri.org/IAquariusPublishService/GetApprovalList")
    @WebResult(name = "GetApprovalListResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "GetApprovalList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetApprovalList")
    @ResponseWrapper(localName = "GetApprovalListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetApprovalListResponse")
    public String getApprovalList();

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.GetPublishViewListResponse>
     */
    @WebMethod(operationName = "GetPublishViewList", action = "http://tempuri.org/IAquariusPublishService/GetPublishViewList")
    @RequestWrapper(localName = "GetPublishViewList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetPublishViewList")
    @ResponseWrapper(localName = "GetPublishViewListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetPublishViewListResponse")
    public Response<GetPublishViewListResponse> getPublishViewListAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetPublishViewList", action = "http://tempuri.org/IAquariusPublishService/GetPublishViewList")
    @RequestWrapper(localName = "GetPublishViewList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetPublishViewList")
    @ResponseWrapper(localName = "GetPublishViewListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetPublishViewListResponse")
    public Future<?> getPublishViewListAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetPublishViewListResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetPublishViewList", action = "http://tempuri.org/IAquariusPublishService/GetPublishViewList")
    @WebResult(name = "GetPublishViewListResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "GetPublishViewList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetPublishViewList")
    @ResponseWrapper(localName = "GetPublishViewListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetPublishViewListResponse")
    public String getPublishViewList();

    /**
     * 
     * @param changesSinceTime
     * @param locationId
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.GetDataSetsListResponse>
     */
    @WebMethod(operationName = "GetDataSetsList", action = "http://tempuri.org/IAquariusPublishService/GetDataSetsList")
    @RequestWrapper(localName = "GetDataSetsList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetDataSetsList")
    @ResponseWrapper(localName = "GetDataSetsListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetDataSetsListResponse")
    public Response<GetDataSetsListResponse> getDataSetsListAsync(
        @WebParam(name = "locationId", targetNamespace = "http://tempuri.org/")
        String locationId,
        @WebParam(name = "changesSinceTime", targetNamespace = "http://tempuri.org/")
        String changesSinceTime);

    /**
     * 
     * @param changesSinceTime
     * @param locationId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetDataSetsList", action = "http://tempuri.org/IAquariusPublishService/GetDataSetsList")
    @RequestWrapper(localName = "GetDataSetsList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetDataSetsList")
    @ResponseWrapper(localName = "GetDataSetsListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetDataSetsListResponse")
    public Future<?> getDataSetsListAsync(
        @WebParam(name = "locationId", targetNamespace = "http://tempuri.org/")
        String locationId,
        @WebParam(name = "changesSinceTime", targetNamespace = "http://tempuri.org/")
        String changesSinceTime,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetDataSetsListResponse> asyncHandler);

    /**
     * 
     * @param changesSinceTime
     * @param locationId
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetDataSetsList", action = "http://tempuri.org/IAquariusPublishService/GetDataSetsList")
    @WebResult(name = "GetDataSetsListResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "GetDataSetsList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetDataSetsList")
    @ResponseWrapper(localName = "GetDataSetsListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetDataSetsListResponse")
    public String getDataSetsList(
        @WebParam(name = "locationId", targetNamespace = "http://tempuri.org/")
        String locationId,
        @WebParam(name = "changesSinceTime", targetNamespace = "http://tempuri.org/")
        String changesSinceTime);

    /**
     * 
     * @param queryToTime
     * @param dataId
     * @param changesSinceTime
     * @param queryFromTime
     * @param asAtTime
     * @param publishView
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.GetTimeSeriesDataResponse>
     */
    @WebMethod(operationName = "GetTimeSeriesData", action = "http://tempuri.org/IAquariusPublishService/GetTimeSeriesData")
    @RequestWrapper(localName = "GetTimeSeriesData", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTimeSeriesData")
    @ResponseWrapper(localName = "GetTimeSeriesDataResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTimeSeriesDataResponse")
    public Response<GetTimeSeriesDataResponse> getTimeSeriesDataAsync(
        @WebParam(name = "dataId", targetNamespace = "http://tempuri.org/")
        String dataId,
        @WebParam(name = "publishView", targetNamespace = "http://tempuri.org/")
        String publishView,
        @WebParam(name = "queryFromTime", targetNamespace = "http://tempuri.org/")
        String queryFromTime,
        @WebParam(name = "queryToTime", targetNamespace = "http://tempuri.org/")
        String queryToTime,
        @WebParam(name = "changesSinceTime", targetNamespace = "http://tempuri.org/")
        String changesSinceTime,
        @WebParam(name = "asAtTime", targetNamespace = "http://tempuri.org/")
        String asAtTime);

    /**
     * 
     * @param queryToTime
     * @param dataId
     * @param changesSinceTime
     * @param asyncHandler
     * @param queryFromTime
     * @param asAtTime
     * @param publishView
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetTimeSeriesData", action = "http://tempuri.org/IAquariusPublishService/GetTimeSeriesData")
    @RequestWrapper(localName = "GetTimeSeriesData", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTimeSeriesData")
    @ResponseWrapper(localName = "GetTimeSeriesDataResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTimeSeriesDataResponse")
    public Future<?> getTimeSeriesDataAsync(
        @WebParam(name = "dataId", targetNamespace = "http://tempuri.org/")
        String dataId,
        @WebParam(name = "publishView", targetNamespace = "http://tempuri.org/")
        String publishView,
        @WebParam(name = "queryFromTime", targetNamespace = "http://tempuri.org/")
        String queryFromTime,
        @WebParam(name = "queryToTime", targetNamespace = "http://tempuri.org/")
        String queryToTime,
        @WebParam(name = "changesSinceTime", targetNamespace = "http://tempuri.org/")
        String changesSinceTime,
        @WebParam(name = "asAtTime", targetNamespace = "http://tempuri.org/")
        String asAtTime,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetTimeSeriesDataResponse> asyncHandler);

    /**
     * 
     * @param queryToTime
     * @param dataId
     * @param changesSinceTime
     * @param queryFromTime
     * @param asAtTime
     * @param publishView
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetTimeSeriesData", action = "http://tempuri.org/IAquariusPublishService/GetTimeSeriesData")
    @WebResult(name = "GetTimeSeriesDataResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "GetTimeSeriesData", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTimeSeriesData")
    @ResponseWrapper(localName = "GetTimeSeriesDataResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTimeSeriesDataResponse")
    public String getTimeSeriesData(
        @WebParam(name = "dataId", targetNamespace = "http://tempuri.org/")
        String dataId,
        @WebParam(name = "publishView", targetNamespace = "http://tempuri.org/")
        String publishView,
        @WebParam(name = "queryFromTime", targetNamespace = "http://tempuri.org/")
        String queryFromTime,
        @WebParam(name = "queryToTime", targetNamespace = "http://tempuri.org/")
        String queryToTime,
        @WebParam(name = "changesSinceTime", targetNamespace = "http://tempuri.org/")
        String changesSinceTime,
        @WebParam(name = "asAtTime", targetNamespace = "http://tempuri.org/")
        String asAtTime);

    /**
     * 
     * @param queryToTime
     * @param dataId
     * @param changesSinceTime
     * @param queryFromTime
     * @param asAtTime
     * @param publishView
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.GetTimeSeriesRawDataResponse>
     */
    @WebMethod(operationName = "GetTimeSeriesRawData", action = "http://tempuri.org/IAquariusPublishService/GetTimeSeriesRawData")
    @RequestWrapper(localName = "GetTimeSeriesRawData", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTimeSeriesRawData")
    @ResponseWrapper(localName = "GetTimeSeriesRawDataResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTimeSeriesRawDataResponse")
    public Response<GetTimeSeriesRawDataResponse> getTimeSeriesRawDataAsync(
        @WebParam(name = "dataId", targetNamespace = "http://tempuri.org/")
        String dataId,
        @WebParam(name = "publishView", targetNamespace = "http://tempuri.org/")
        String publishView,
        @WebParam(name = "queryFromTime", targetNamespace = "http://tempuri.org/")
        String queryFromTime,
        @WebParam(name = "queryToTime", targetNamespace = "http://tempuri.org/")
        String queryToTime,
        @WebParam(name = "changesSinceTime", targetNamespace = "http://tempuri.org/")
        String changesSinceTime,
        @WebParam(name = "asAtTime", targetNamespace = "http://tempuri.org/")
        String asAtTime);

    /**
     * 
     * @param queryToTime
     * @param dataId
     * @param changesSinceTime
     * @param asyncHandler
     * @param queryFromTime
     * @param asAtTime
     * @param publishView
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetTimeSeriesRawData", action = "http://tempuri.org/IAquariusPublishService/GetTimeSeriesRawData")
    @RequestWrapper(localName = "GetTimeSeriesRawData", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTimeSeriesRawData")
    @ResponseWrapper(localName = "GetTimeSeriesRawDataResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTimeSeriesRawDataResponse")
    public Future<?> getTimeSeriesRawDataAsync(
        @WebParam(name = "dataId", targetNamespace = "http://tempuri.org/")
        String dataId,
        @WebParam(name = "publishView", targetNamespace = "http://tempuri.org/")
        String publishView,
        @WebParam(name = "queryFromTime", targetNamespace = "http://tempuri.org/")
        String queryFromTime,
        @WebParam(name = "queryToTime", targetNamespace = "http://tempuri.org/")
        String queryToTime,
        @WebParam(name = "changesSinceTime", targetNamespace = "http://tempuri.org/")
        String changesSinceTime,
        @WebParam(name = "asAtTime", targetNamespace = "http://tempuri.org/")
        String asAtTime,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetTimeSeriesRawDataResponse> asyncHandler);

    /**
     * 
     * @param queryToTime
     * @param dataId
     * @param changesSinceTime
     * @param queryFromTime
     * @param asAtTime
     * @param publishView
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetTimeSeriesRawData", action = "http://tempuri.org/IAquariusPublishService/GetTimeSeriesRawData")
    @WebResult(name = "GetTimeSeriesRawDataResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "GetTimeSeriesRawData", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTimeSeriesRawData")
    @ResponseWrapper(localName = "GetTimeSeriesRawDataResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTimeSeriesRawDataResponse")
    public String getTimeSeriesRawData(
        @WebParam(name = "dataId", targetNamespace = "http://tempuri.org/")
        String dataId,
        @WebParam(name = "publishView", targetNamespace = "http://tempuri.org/")
        String publishView,
        @WebParam(name = "queryFromTime", targetNamespace = "http://tempuri.org/")
        String queryFromTime,
        @WebParam(name = "queryToTime", targetNamespace = "http://tempuri.org/")
        String queryToTime,
        @WebParam(name = "changesSinceTime", targetNamespace = "http://tempuri.org/")
        String changesSinceTime,
        @WebParam(name = "asAtTime", targetNamespace = "http://tempuri.org/")
        String asAtTime);

    /**
     * 
     * @param anchorTime
     * @param sampleIntervalInMinutes
     * @param queryToTime
     * @param dataId
     * @param queryFromTime
     * @param publishView
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.GetTimeSeriesDataResampledResponse>
     */
    @WebMethod(operationName = "GetTimeSeriesDataResampled", action = "http://tempuri.org/IAquariusPublishService/GetTimeSeriesDataResampled")
    @RequestWrapper(localName = "GetTimeSeriesDataResampled", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTimeSeriesDataResampled")
    @ResponseWrapper(localName = "GetTimeSeriesDataResampledResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTimeSeriesDataResampledResponse")
    public Response<GetTimeSeriesDataResampledResponse> getTimeSeriesDataResampledAsync(
        @WebParam(name = "dataId", targetNamespace = "http://tempuri.org/")
        String dataId,
        @WebParam(name = "publishView", targetNamespace = "http://tempuri.org/")
        String publishView,
        @WebParam(name = "queryFromTime", targetNamespace = "http://tempuri.org/")
        String queryFromTime,
        @WebParam(name = "queryToTime", targetNamespace = "http://tempuri.org/")
        String queryToTime,
        @WebParam(name = "sampleIntervalInMinutes", targetNamespace = "http://tempuri.org/")
        Integer sampleIntervalInMinutes,
        @WebParam(name = "anchorTime", targetNamespace = "http://tempuri.org/")
        String anchorTime);

    /**
     * 
     * @param anchorTime
     * @param sampleIntervalInMinutes
     * @param queryToTime
     * @param dataId
     * @param asyncHandler
     * @param queryFromTime
     * @param publishView
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetTimeSeriesDataResampled", action = "http://tempuri.org/IAquariusPublishService/GetTimeSeriesDataResampled")
    @RequestWrapper(localName = "GetTimeSeriesDataResampled", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTimeSeriesDataResampled")
    @ResponseWrapper(localName = "GetTimeSeriesDataResampledResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTimeSeriesDataResampledResponse")
    public Future<?> getTimeSeriesDataResampledAsync(
        @WebParam(name = "dataId", targetNamespace = "http://tempuri.org/")
        String dataId,
        @WebParam(name = "publishView", targetNamespace = "http://tempuri.org/")
        String publishView,
        @WebParam(name = "queryFromTime", targetNamespace = "http://tempuri.org/")
        String queryFromTime,
        @WebParam(name = "queryToTime", targetNamespace = "http://tempuri.org/")
        String queryToTime,
        @WebParam(name = "sampleIntervalInMinutes", targetNamespace = "http://tempuri.org/")
        Integer sampleIntervalInMinutes,
        @WebParam(name = "anchorTime", targetNamespace = "http://tempuri.org/")
        String anchorTime,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetTimeSeriesDataResampledResponse> asyncHandler);

    /**
     * 
     * @param anchorTime
     * @param sampleIntervalInMinutes
     * @param queryToTime
     * @param dataId
     * @param queryFromTime
     * @param publishView
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetTimeSeriesDataResampled", action = "http://tempuri.org/IAquariusPublishService/GetTimeSeriesDataResampled")
    @WebResult(name = "GetTimeSeriesDataResampledResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "GetTimeSeriesDataResampled", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTimeSeriesDataResampled")
    @ResponseWrapper(localName = "GetTimeSeriesDataResampledResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTimeSeriesDataResampledResponse")
    public String getTimeSeriesDataResampled(
        @WebParam(name = "dataId", targetNamespace = "http://tempuri.org/")
        String dataId,
        @WebParam(name = "publishView", targetNamespace = "http://tempuri.org/")
        String publishView,
        @WebParam(name = "queryFromTime", targetNamespace = "http://tempuri.org/")
        String queryFromTime,
        @WebParam(name = "queryToTime", targetNamespace = "http://tempuri.org/")
        String queryToTime,
        @WebParam(name = "sampleIntervalInMinutes", targetNamespace = "http://tempuri.org/")
        Integer sampleIntervalInMinutes,
        @WebParam(name = "anchorTime", targetNamespace = "http://tempuri.org/")
        String anchorTime);

    /**
     * 
     * @param ratingCurveFilter
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.GetRatingCurveListResponse>
     */
    @WebMethod(operationName = "GetRatingCurveList", action = "http://tempuri.org/IAquariusPublishService/GetRatingCurveList")
    @RequestWrapper(localName = "GetRatingCurveList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingCurveList")
    @ResponseWrapper(localName = "GetRatingCurveListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingCurveListResponse")
    public Response<GetRatingCurveListResponse> getRatingCurveListAsync(
        @WebParam(name = "ratingCurveFilter", targetNamespace = "http://tempuri.org/")
        RatingCurveFilter ratingCurveFilter);

    /**
     * 
     * @param ratingCurveFilter
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetRatingCurveList", action = "http://tempuri.org/IAquariusPublishService/GetRatingCurveList")
    @RequestWrapper(localName = "GetRatingCurveList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingCurveList")
    @ResponseWrapper(localName = "GetRatingCurveListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingCurveListResponse")
    public Future<?> getRatingCurveListAsync(
        @WebParam(name = "ratingCurveFilter", targetNamespace = "http://tempuri.org/")
        RatingCurveFilter ratingCurveFilter,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetRatingCurveListResponse> asyncHandler);

    /**
     * 
     * @param ratingCurveFilter
     * @return
     *     returns com.aquarius.Publish.ArrayOfstring
     */
    @WebMethod(operationName = "GetRatingCurveList", action = "http://tempuri.org/IAquariusPublishService/GetRatingCurveList")
    @WebResult(name = "GetRatingCurveListResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "GetRatingCurveList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingCurveList")
    @ResponseWrapper(localName = "GetRatingCurveListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingCurveListResponse")
    public ArrayOfstring getRatingCurveList(
        @WebParam(name = "ratingCurveFilter", targetNamespace = "http://tempuri.org/")
        RatingCurveFilter ratingCurveFilter);

    /**
     * 
     * @param ratingCurveIdentifier
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.GetRatingTableAsCsvByIdentifierResponse>
     */
    @WebMethod(operationName = "GetRatingTableAsCsvByIdentifier", action = "http://tempuri.org/IAquariusPublishService/GetRatingTableAsCsvByIdentifier")
    @RequestWrapper(localName = "GetRatingTableAsCsvByIdentifier", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingTableAsCsvByIdentifier")
    @ResponseWrapper(localName = "GetRatingTableAsCsvByIdentifierResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingTableAsCsvByIdentifierResponse")
    public Response<GetRatingTableAsCsvByIdentifierResponse> getRatingTableAsCsvByIdentifierAsync(
        @WebParam(name = "ratingCurveIdentifier", targetNamespace = "http://tempuri.org/")
        String ratingCurveIdentifier);

    /**
     * 
     * @param asyncHandler
     * @param ratingCurveIdentifier
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetRatingTableAsCsvByIdentifier", action = "http://tempuri.org/IAquariusPublishService/GetRatingTableAsCsvByIdentifier")
    @RequestWrapper(localName = "GetRatingTableAsCsvByIdentifier", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingTableAsCsvByIdentifier")
    @ResponseWrapper(localName = "GetRatingTableAsCsvByIdentifierResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingTableAsCsvByIdentifierResponse")
    public Future<?> getRatingTableAsCsvByIdentifierAsync(
        @WebParam(name = "ratingCurveIdentifier", targetNamespace = "http://tempuri.org/")
        String ratingCurveIdentifier,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetRatingTableAsCsvByIdentifierResponse> asyncHandler);

    /**
     * 
     * @param ratingCurveIdentifier
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetRatingTableAsCsvByIdentifier", action = "http://tempuri.org/IAquariusPublishService/GetRatingTableAsCsvByIdentifier")
    @WebResult(name = "GetRatingTableAsCsvByIdentifierResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "GetRatingTableAsCsvByIdentifier", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingTableAsCsvByIdentifier")
    @ResponseWrapper(localName = "GetRatingTableAsCsvByIdentifierResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingTableAsCsvByIdentifierResponse")
    public String getRatingTableAsCsvByIdentifier(
        @WebParam(name = "ratingCurveIdentifier", targetNamespace = "http://tempuri.org/")
        String ratingCurveIdentifier);

    /**
     * 
     * @param inputParameter
     * @param locationId
     * @param outputParameter
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.GetRatingTableResponse>
     */
    @WebMethod(operationName = "GetRatingTable", action = "http://tempuri.org/IAquariusPublishService/GetRatingTable")
    @RequestWrapper(localName = "GetRatingTable", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingTable")
    @ResponseWrapper(localName = "GetRatingTableResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingTableResponse")
    public Response<GetRatingTableResponse> getRatingTableAsync(
        @WebParam(name = "locationId", targetNamespace = "http://tempuri.org/")
        String locationId,
        @WebParam(name = "inputParameter", targetNamespace = "http://tempuri.org/")
        String inputParameter,
        @WebParam(name = "outputParameter", targetNamespace = "http://tempuri.org/")
        String outputParameter);

    /**
     * 
     * @param inputParameter
     * @param locationId
     * @param asyncHandler
     * @param outputParameter
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetRatingTable", action = "http://tempuri.org/IAquariusPublishService/GetRatingTable")
    @RequestWrapper(localName = "GetRatingTable", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingTable")
    @ResponseWrapper(localName = "GetRatingTableResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingTableResponse")
    public Future<?> getRatingTableAsync(
        @WebParam(name = "locationId", targetNamespace = "http://tempuri.org/")
        String locationId,
        @WebParam(name = "inputParameter", targetNamespace = "http://tempuri.org/")
        String inputParameter,
        @WebParam(name = "outputParameter", targetNamespace = "http://tempuri.org/")
        String outputParameter,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetRatingTableResponse> asyncHandler);

    /**
     * 
     * @param inputParameter
     * @param locationId
     * @param outputParameter
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetRatingTable", action = "http://tempuri.org/IAquariusPublishService/GetRatingTable")
    @WebResult(name = "GetRatingTableResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "GetRatingTable", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingTable")
    @ResponseWrapper(localName = "GetRatingTableResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingTableResponse")
    public String getRatingTable(
        @WebParam(name = "locationId", targetNamespace = "http://tempuri.org/")
        String locationId,
        @WebParam(name = "inputParameter", targetNamespace = "http://tempuri.org/")
        String inputParameter,
        @WebParam(name = "outputParameter", targetNamespace = "http://tempuri.org/")
        String outputParameter);

    /**
     * 
     * @param inputParameter
     * @param locationId
     * @param outputParameter
     * @param label
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.GetRatingTableExtensionResponse>
     */
    @WebMethod(operationName = "GetRatingTableExtension", action = "http://tempuri.org/IAquariusPublishService/GetRatingTableExtension")
    @RequestWrapper(localName = "GetRatingTableExtension", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingTableExtension")
    @ResponseWrapper(localName = "GetRatingTableExtensionResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingTableExtensionResponse")
    public Response<GetRatingTableExtensionResponse> getRatingTableExtensionAsync(
        @WebParam(name = "locationId", targetNamespace = "http://tempuri.org/")
        String locationId,
        @WebParam(name = "inputParameter", targetNamespace = "http://tempuri.org/")
        String inputParameter,
        @WebParam(name = "outputParameter", targetNamespace = "http://tempuri.org/")
        String outputParameter,
        @WebParam(name = "label", targetNamespace = "http://tempuri.org/")
        String label);

    /**
     * 
     * @param inputParameter
     * @param locationId
     * @param asyncHandler
     * @param outputParameter
     * @param label
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetRatingTableExtension", action = "http://tempuri.org/IAquariusPublishService/GetRatingTableExtension")
    @RequestWrapper(localName = "GetRatingTableExtension", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingTableExtension")
    @ResponseWrapper(localName = "GetRatingTableExtensionResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingTableExtensionResponse")
    public Future<?> getRatingTableExtensionAsync(
        @WebParam(name = "locationId", targetNamespace = "http://tempuri.org/")
        String locationId,
        @WebParam(name = "inputParameter", targetNamespace = "http://tempuri.org/")
        String inputParameter,
        @WebParam(name = "outputParameter", targetNamespace = "http://tempuri.org/")
        String outputParameter,
        @WebParam(name = "label", targetNamespace = "http://tempuri.org/")
        String label,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetRatingTableExtensionResponse> asyncHandler);

    /**
     * 
     * @param inputParameter
     * @param locationId
     * @param outputParameter
     * @param label
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetRatingTableExtension", action = "http://tempuri.org/IAquariusPublishService/GetRatingTableExtension")
    @WebResult(name = "GetRatingTableExtensionResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "GetRatingTableExtension", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingTableExtension")
    @ResponseWrapper(localName = "GetRatingTableExtensionResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetRatingTableExtensionResponse")
    public String getRatingTableExtension(
        @WebParam(name = "locationId", targetNamespace = "http://tempuri.org/")
        String locationId,
        @WebParam(name = "inputParameter", targetNamespace = "http://tempuri.org/")
        String inputParameter,
        @WebParam(name = "outputParameter", targetNamespace = "http://tempuri.org/")
        String outputParameter,
        @WebParam(name = "label", targetNamespace = "http://tempuri.org/")
        String label);

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.GetTemplateListResponse>
     */
    @WebMethod(operationName = "GetTemplateList", action = "http://tempuri.org/IAquariusPublishService/GetTemplateList")
    @RequestWrapper(localName = "GetTemplateList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTemplateList")
    @ResponseWrapper(localName = "GetTemplateListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTemplateListResponse")
    public Response<GetTemplateListResponse> getTemplateListAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetTemplateList", action = "http://tempuri.org/IAquariusPublishService/GetTemplateList")
    @RequestWrapper(localName = "GetTemplateList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTemplateList")
    @ResponseWrapper(localName = "GetTemplateListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTemplateListResponse")
    public Future<?> getTemplateListAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetTemplateListResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetTemplateList", action = "http://tempuri.org/IAquariusPublishService/GetTemplateList")
    @WebResult(name = "GetTemplateListResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "GetTemplateList", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTemplateList")
    @ResponseWrapper(localName = "GetTemplateListResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetTemplateListResponse")
    public String getTemplateList();

    /**
     * 
     * @param outputPath
     * @param reportType
     * @param dataId
     * @param reportName
     * @param reportId
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.GetReportDataResponse>
     */
    @WebMethod(operationName = "GetReportData", action = "http://tempuri.org/IAquariusPublishService/GetReportData")
    @RequestWrapper(localName = "GetReportData", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetReportData")
    @ResponseWrapper(localName = "GetReportDataResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetReportDataResponse")
    public Response<GetReportDataResponse> getReportDataAsync(
        @WebParam(name = "dataId", targetNamespace = "http://tempuri.org/")
        String dataId,
        @WebParam(name = "reportId", targetNamespace = "http://tempuri.org/")
        String reportId,
        @WebParam(name = "reportType", targetNamespace = "http://tempuri.org/")
        Integer reportType,
        @WebParam(name = "outputPath", targetNamespace = "http://tempuri.org/")
        String outputPath,
        @WebParam(name = "reportName", targetNamespace = "http://tempuri.org/")
        String reportName);

    /**
     * 
     * @param outputPath
     * @param reportType
     * @param dataId
     * @param asyncHandler
     * @param reportName
     * @param reportId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetReportData", action = "http://tempuri.org/IAquariusPublishService/GetReportData")
    @RequestWrapper(localName = "GetReportData", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetReportData")
    @ResponseWrapper(localName = "GetReportDataResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetReportDataResponse")
    public Future<?> getReportDataAsync(
        @WebParam(name = "dataId", targetNamespace = "http://tempuri.org/")
        String dataId,
        @WebParam(name = "reportId", targetNamespace = "http://tempuri.org/")
        String reportId,
        @WebParam(name = "reportType", targetNamespace = "http://tempuri.org/")
        Integer reportType,
        @WebParam(name = "outputPath", targetNamespace = "http://tempuri.org/")
        String outputPath,
        @WebParam(name = "reportName", targetNamespace = "http://tempuri.org/")
        String reportName,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetReportDataResponse> asyncHandler);

    /**
     * 
     * @param outputPath
     * @param reportType
     * @param dataId
     * @param reportName
     * @param reportId
     * @return
     *     returns byte[]
     */
    @WebMethod(operationName = "GetReportData", action = "http://tempuri.org/IAquariusPublishService/GetReportData")
    @WebResult(name = "GetReportDataResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "GetReportData", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetReportData")
    @ResponseWrapper(localName = "GetReportDataResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetReportDataResponse")
    public byte[] getReportData(
        @WebParam(name = "dataId", targetNamespace = "http://tempuri.org/")
        String dataId,
        @WebParam(name = "reportId", targetNamespace = "http://tempuri.org/")
        String reportId,
        @WebParam(name = "reportType", targetNamespace = "http://tempuri.org/")
        Integer reportType,
        @WebParam(name = "outputPath", targetNamespace = "http://tempuri.org/")
        String outputPath,
        @WebParam(name = "reportName", targetNamespace = "http://tempuri.org/")
        String reportName);

    /**
     * 
     * @param filter
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.GetLocationsResponse>
     */
    @WebMethod(operationName = "GetLocations", action = "http://tempuri.org/IAquariusPublishService/GetLocations")
    @RequestWrapper(localName = "GetLocations", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetLocations")
    @ResponseWrapper(localName = "GetLocationsResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetLocationsResponse")
    public Response<GetLocationsResponse> getLocationsAsync(
        @WebParam(name = "filter", targetNamespace = "http://tempuri.org/")
        String filter);

    /**
     * 
     * @param asyncHandler
     * @param filter
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetLocations", action = "http://tempuri.org/IAquariusPublishService/GetLocations")
    @RequestWrapper(localName = "GetLocations", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetLocations")
    @ResponseWrapper(localName = "GetLocationsResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetLocationsResponse")
    public Future<?> getLocationsAsync(
        @WebParam(name = "filter", targetNamespace = "http://tempuri.org/")
        String filter,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetLocationsResponse> asyncHandler);

    /**
     * 
     * @param filter
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetLocations", action = "http://tempuri.org/IAquariusPublishService/GetLocations")
    @WebResult(name = "GetLocationsResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "GetLocations", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetLocations")
    @ResponseWrapper(localName = "GetLocationsResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetLocationsResponse")
    public String getLocations(
        @WebParam(name = "filter", targetNamespace = "http://tempuri.org/")
        String filter);

    /**
     * 
     * @param filter
     * @param folderId
     * @return
     *     returns javax.xml.ws.Response<com.aquarius.Publish.GetLocationsByFolderIdResponse>
     */
    @WebMethod(operationName = "GetLocationsByFolderId", action = "http://tempuri.org/IAquariusPublishService/GetLocationsByFolderId")
    @RequestWrapper(localName = "GetLocationsByFolderId", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetLocationsByFolderId")
    @ResponseWrapper(localName = "GetLocationsByFolderIdResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetLocationsByFolderIdResponse")
    public Response<GetLocationsByFolderIdResponse> getLocationsByFolderIdAsync(
        @WebParam(name = "folderId", targetNamespace = "http://tempuri.org/")
        Long folderId,
        @WebParam(name = "filter", targetNamespace = "http://tempuri.org/")
        String filter);

    /**
     * 
     * @param asyncHandler
     * @param filter
     * @param folderId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetLocationsByFolderId", action = "http://tempuri.org/IAquariusPublishService/GetLocationsByFolderId")
    @RequestWrapper(localName = "GetLocationsByFolderId", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetLocationsByFolderId")
    @ResponseWrapper(localName = "GetLocationsByFolderIdResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetLocationsByFolderIdResponse")
    public Future<?> getLocationsByFolderIdAsync(
        @WebParam(name = "folderId", targetNamespace = "http://tempuri.org/")
        Long folderId,
        @WebParam(name = "filter", targetNamespace = "http://tempuri.org/")
        String filter,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetLocationsByFolderIdResponse> asyncHandler);

    /**
     * 
     * @param filter
     * @param folderId
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetLocationsByFolderId", action = "http://tempuri.org/IAquariusPublishService/GetLocationsByFolderId")
    @WebResult(name = "GetLocationsByFolderIdResult", targetNamespace = "http://tempuri.org/")
    @RequestWrapper(localName = "GetLocationsByFolderId", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetLocationsByFolderId")
    @ResponseWrapper(localName = "GetLocationsByFolderIdResponse", targetNamespace = "http://tempuri.org/", className = "com.aquarius.Publish.GetLocationsByFolderIdResponse")
    public String getLocationsByFolderId(
        @WebParam(name = "folderId", targetNamespace = "http://tempuri.org/")
        Long folderId,
        @WebParam(name = "filter", targetNamespace = "http://tempuri.org/")
        String filter);

}
